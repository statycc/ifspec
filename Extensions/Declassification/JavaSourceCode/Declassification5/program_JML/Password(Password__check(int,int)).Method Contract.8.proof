\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Mar 27 17:59:49 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\problem {
!(  wellFormed(heapAtPre<<anonHeapFunction>>)
  & heap = heapAtPre<<anonHeapFunction>>
  & !self_5 = null
  &   boolean::select(heap,
                      self_5,
                      java.lang.Object::<created>)
    = TRUE
  & Password::exactInstance(self_5) = TRUE
  & (inInt(user_5) & inInt(password_5))
  & java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,
                            self_5)
  & {_user_5:=user_5 || _password_5:=password_5}
      \[{
          exc_5=null;try {
            result_5=self_5.check(_user_5,_password_5)@Password;
          }   catch (java.lang.Throwable e) {
            exc_5=e;
          }
        }\] (  selfAtPost_5 = self_5
             & resultAtPost_5 = result_5
             & excAtPost_5 = exc_5
             & heapAtPost = heap))

}

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "90dde5a1f3b2857ec76a728ce080f1a88f0e4aa7"))

(autoModeTime "1079")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "notRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "6") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "6") (term "1,0,0,0,1"))
(rule "eqSymm" (formula "6") (term "1,0,0,1"))
(rule "eqSymm" (formula "2"))
(rule "assignment" (formula "6") (term "1"))
(builtin "One Step Simplification" (formula "6"))
(rule "boxToDiamond" (formula "6") (term "1"))
(builtin "One Step Simplification" (formula "6"))
(rule "notLeft" (formula "6"))
(rule "Class_invariant_axiom_for_Password" (formula "5") (ifseqformula "4"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "6"))
(rule "notLeft" (formula "5"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_check,savedHeapBefore_check,_password_5Before_check,_user_5Before_check"))
(builtin "One Step Simplification" (formula "7"))
(rule "for_to_while" (formula "7") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "i"))
(rule "assignment" (formula "7") (term "1"))
(builtin "One Step Simplification" (formula "7"))
(rule "unusedLabel" (formula "7") (term "1"))
(builtin "Loop Invariant" (formula "7") (newnames "variant,b,heapBefore_LOOP,iBefore_LOOP,i_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
(branch "Invariant Initially Valid"
   (builtin "One Step Simplification" (formula "7"))
   (rule "leq_literals" (formula "7") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0,1,0"))
   (rule "add_zero_right" (formula "7") (term "0,0,1,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
   (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "2"))
   (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "2"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1"))
   (rule "mul_literals" (formula "7") (term "1,1,0,0,1"))
   (rule "nnf_imp2or" (formula "7") (term "0,1"))
   (rule "nnf_notAnd" (formula "7") (term "0,0,1"))
   (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,1"))
   (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,1"))
   (rule "add_literals" (formula "7") (term "0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1"))
   (rule "mul_literals" (formula "7") (term "1,0,0,0,1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "inEqSimp_geqRight" (formula "7"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "arrayLengthIsAShort" (formula "1") (term "0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "arrayLengthNotNegative" (formula "1") (term "0"))
   (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
   (rule "qeq_literals" (formula "1") (term "0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "Body Preserves Invariant"
   (builtin "One Step Simplification" (formula "6"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "translateJavaSubInt" (formula "9") (term "0,1,1,1,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "9") (term "0,1,1,1,0,1"))
   (rule "andLeft" (formula "6"))
   (rule "impRight" (formula "10"))
   (rule "andLeft" (formula "7"))
   (rule "eqSymm" (formula "12") (term "1,0,0,1,0,1,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "12") (term "0,1,1,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "12") (term "0,1,1,1,0"))
   (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,0,1,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,1,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "7"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "pullOutSelect" (formula "12") (term "0,1,0,1,1,1,0") (inst "selectSK=Password_names_1"))
   (rule "simplifySelectOfAnon" (formula "1"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "5")))
   (rule "replaceKnownSelect_taclet1_0" (formula "9") (term "0,0"))
   (rule "replaceKnownSelect_taclet1_0" (formula "10") (term "1,0,0,0,1,0"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "8") (term "0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "9") (term "1,0,0,0,1,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "12") (term "0,1,0,1,1,1,0"))
   (rule "variableDeclarationAssign" (formula "1") (term "1"))
   (rule "variableDeclarationAssign" (formula "12") (term "1"))
   (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_2"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "rtrn"))
   (rule "assignment" (formula "12") (term "1"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "returnExpr"))
   (rule "variableDeclarationAssign" (formula "12") (term "1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "exc_6"))
   (rule "assignment" (formula "12") (term "1"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "thrownExc"))
   (rule "blockReturn" (formula "12") (term "1,0,1,0,1"))
   (rule "blockThrow" (formula "12") (term "1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "pullOutSelect" (formula "9") (term "1,0,1,0,1,0") (inst "selectSK=Password_passwords_1"))
   (rule "simplifySelectOfAnon" (formula "9"))
   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "14")) (ifInst ""  (formula "4")))
   (rule "hideAuxiliaryEq" (formula "9"))
   (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "9") (term "1,0,1,0,1,0"))
   (rule "boxToDiamond" (formula "1") (term "1"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_notAnd" (formula "8") (term "1,0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "12") (term "1,0,1,0,0,1,1,1,0,1"))
   (rule "nnf_imp2or" (formula "12") (term "0,1,0,0,1,1,1,0,1"))
   (rule "nnf_notAnd" (formula "12") (term "0,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,0,0,1,1,1,0,1"))
   (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,1,0,0,1,1,1,0,1"))
   (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0,0,1,1,1,0,1"))
   (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0,0,1,1,1,0,1"))
   (rule "shift_paren_or" (formula "8") (term "0"))
   (rule "compound_less_than_comparison_2" (formula "9") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_2"))
   (rule "assignment" (formula "9") (term "1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_3"))
   (rule "eval_order_array_access6" (formula "9") (term "1") (inst "#v0=x_arr"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_arr_1"))
   (rule "assignment_read_attribute_this" (formula "9"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "replaceKnownSelect_taclet1_0" (formula "9") (term "0,1,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "9") (term "0,1,0"))
   (rule "assignment_read_length" (formula "9"))
   (branch "Normal Execution (x_arr_1 != null)"
      (builtin "One Step Simplification" (formula "9"))
      (rule "less_than_comparison_simple" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,0"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "emptyModality" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "notRight" (formula "9"))
      (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
      (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0"))
      (rule "add_literals" (formula "8") (term "0,0"))
      (rule "qeq_literals" (formula "8") (term "0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_14"))
      (rule "compound_less_than_comparison_2" (formula "11") (term "1") (inst "#v1=x_16") (inst "#v0=x_15"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_15"))
      (rule "assignment" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_16"))
      (rule "eval_order_array_access6" (formula "11") (term "1") (inst "#v0=x_arr"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_arr_5"))
      (rule "assignment_read_attribute_this" (formula "11"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "replaceKnownSelect_taclet1_0" (formula "11") (term "0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "11") (term "0,1,0"))
      (rule "assignment_read_length" (formula "11"))
      (branch "Normal Execution (x_arr_5 != null)"
         (builtin "One Step Simplification" (formula "11"))
         (rule "less_than_comparison_simple" (formula "11") (term "1"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0"))
         (rule "replace_known_left" (formula "11") (term "0,0,1,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "ifSplit" (formula "11"))
         (branch "if x_14 true"
            (builtin "One Step Simplification" (formula "12"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "unusedLabel" (formula "11") (term "1"))
            (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_17"))
            (rule "compound_assignment_3_nonsimple" (formula "11") (term "1"))
            (rule "ifElseUnfold" (formula "11") (term "1") (inst "#boolv=x_18"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_18"))
            (rule "compound_assignment_2" (formula "11") (term "1") (inst "#v=x_19"))
            (rule "variableDeclarationAssign" (formula "11") (term "1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_19"))
            (rule "compound_equality_comparison_1" (formula "11") (term "1") (inst "#v0=x_20"))
            (rule "variableDeclarationAssign" (formula "11") (term "1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_20"))
            (rule "eval_order_array_access4" (formula "11") (term "1") (inst "#v0=x_arr"))
            (rule "variableDeclarationAssign" (formula "11") (term "1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_arr_6"))
            (rule "assignment_read_attribute_this" (formula "11"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "replaceKnownSelect_taclet1_0" (formula "11") (term "0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "11") (term "0,1,0"))
            (rule "assignment_array2" (formula "11"))
            (branch "Normal Execution (x_arr_6 != null)"
               (builtin "One Step Simplification" (formula "11"))
               (rule "pullOutSelect" (formula "11") (term "0,1,0") (inst "selectSK=arr_2"))
               (rule "simplifySelectOfAnon" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "equality_comparison_simple" (formula "12") (term "1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "eqSymm" (formula "12") (term "0,0,1,0"))
               (rule "compound_assignment_1_new" (formula "12") (term "1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "arrayLengthIsAShort" (formula "2") (term "0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "arrayLengthNotNegative" (formula "2") (term "0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0") (ifseqformula "4"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "13"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0") (ifseqformula "5"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "13"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "ifElseSplit" (formula "15"))
               (branch "if x_18 true"
                  (builtin "One Step Simplification" (formula "16"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "ifSkipThen" (formula "16") (term "1"))
                  (rule "assignment" (formula "16") (term "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "blockEmpty" (formula "16") (term "1"))
                  (rule "unusedLabel" (formula "16") (term "1"))
                  (rule "postincrement" (formula "16") (term "1"))
                  (rule "compound_int_cast_expression" (formula "16") (term "1") (inst "#v=x"))
                  (rule "variableDeclarationAssign" (formula "16") (term "1"))
                  (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_23"))
                  (rule "remove_parentheses_right" (formula "16") (term "1"))
                  (rule "assignmentAdditionInt" (formula "16") (term "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
                  (rule "polySimp_addComm0" (formula "16") (term "0,1,0"))
                  (rule "widening_identity_cast_5" (formula "16") (term "1"))
                  (rule "assignment" (formula "16") (term "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "tryEmpty" (formula "16") (term "1"))
                  (rule "methodCallEmpty" (formula "16") (term "1"))
                  (rule "emptyModality" (formula "16") (term "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "replaceKnownSelect_taclet1_0" (formula "16") (term "0,1,0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "16") (term "0,1,0,1"))
                  (rule "replaceKnownSelect_taclet1_0" (formula "16") (term "0,0,1,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "16") (term "0,0,1,0,0,0"))
                  (rule "replaceKnownSelect_taclet1_0" (formula "16") (term "1,0,0,0,1,0,1,0,0"))
                  (rule "replaceKnownSelect_taclet1_2" (formula "16") (term "1,0,0,1,1,0,1,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "16") (term "1,0,0,0,1,0,1,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "16") (term "1,0,0,1,1,0,1,0,0"))
                  (rule "eqSymm" (formula "16") (term "1,0,0,1,0"))
                  (rule "replace_known_left" (formula "16") (term "1,0,0,0") (ifseqformula "5"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "polySimp_mulComm0" (formula "16") (term "0,0,1"))
                  (rule "polySimp_rightDist" (formula "16") (term "0,0,1"))
                  (rule "mul_literals" (formula "16") (term "0,0,0,1"))
                  (rule "precOfInt" (formula "16") (term "1"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,1"))
                  (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0,0,1,1"))
                  (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0,1,1"))
                  (rule "polySimp_addComm1" (formula "16") (term "0,0,1,1"))
                  (rule "polySimp_pullOutFactor2b" (formula "16") (term "0,1,1"))
                  (rule "add_literals" (formula "16") (term "1,1,0,1,1"))
                  (rule "times_zero_1" (formula "16") (term "1,0,1,1"))
                  (rule "add_zero_right" (formula "16") (term "0,1,1"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0,1,1"))
                  (rule "polySimp_addComm1" (formula "16") (term "0,0,1,1"))
                  (rule "add_literals" (formula "16") (term "0,0,0,1,1"))
                  (rule "add_zero_left" (formula "16") (term "0,0,1,1"))
                  (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1,1"))
                  (rule "add_literals" (formula "16") (term "1,0,1,1"))
                  (rule "times_zero_1" (formula "16") (term "0,1,1"))
                  (rule "leq_literals" (formula "16") (term "1,1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "inEqSimp_homoInEq0" (formula "16") (term "1"))
                  (rule "times_zero_2" (formula "16") (term "1,0,1"))
                  (rule "add_zero_right" (formula "16") (term "0,1"))
                  (rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
                  (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "7"))
                  (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "14"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "ifthenelse_negated" (formula "3") (term "0"))
                  (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "7"))
                  (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "applyEqReverse" (formula "13") (term "1") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "eqSymm" (formula "12"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0"))
                  (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,1"))
                  (rule "mul_literals" (formula "15") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,1"))
                  (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "4"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_subsumption1" (formula "15") (term "0,0") (ifseqformula "10"))
                  (rule "leq_literals" (formula "15") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "andRight" (formula "15"))
                  (branch
                     (rule "allRight" (formula "15") (inst "sk=j_0"))
                     (rule "cutUpperBound" (formula "15") (ifseqformula "11"))
                     (branch
                        (rule "crossInst" (formula "12") (inst "sk=j_2") (ifseqformula "16"))
                        (rule "orRight" (formula "17"))
                        (rule "andLeft" (formula "12"))
                        (rule "orRight" (formula "19"))
                        (rule "orRight" (formula "18"))
                        (rule "notRight" (formula "21"))
                        (rule "notRight" (formula "21"))
                        (rule "inEqSimp_leqRight" (formula "20"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "21"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "5"))
                        (rule "applyEqRigid" (formula "17") (term "0,1,0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "17") (term "0,2,0,0,1,0") (ifseqformula "16"))
                        (rule "replace_known_left" (formula "17") (term "0,1,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "5"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch
                        (rule "crossInst" (formula "12") (inst "sk=j_1") (ifseqformula "16"))
                        (rule "orRight" (formula "17"))
                        (rule "notLeft" (formula "1"))
                        (rule "andLeft" (formula "11"))
                        (rule "orRight" (formula "19"))
                        (rule "orRight" (formula "18"))
                        (rule "notRight" (formula "21"))
                        (rule "notRight" (formula "21"))
                        (rule "inEqSimp_geqRight" (formula "21"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_leqRight" (formula "21"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "applyEqRigid" (formula "16") (term "0,1,0,0") (ifseqformula "15"))
                        (rule "applyEq" (formula "16") (term "0,2,0,0,1") (ifseqformula "15"))
                        (rule "replace_known_left" (formula "16") (term "0,1") (ifseqformula "4"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "applyEqRigid" (formula "16") (term "0,2,0,0,1") (ifseqformula "15"))
                        (rule "replace_known_left" (formula "16") (term "0,1") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "15"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "18") (ifseqformula "2"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0"))
                        (rule "add_literals" (formula "18") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0"))
                        (rule "add_zero_right" (formula "18") (term "0,0"))
                        (rule "qeq_literals" (formula "18") (term "0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "false_right" (formula "18"))
                        (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "16") (term "0,0"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_4"))
                        (rule "simplifySelectOfAnon" (formula "4"))
                        (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "21")) (ifInst ""  (formula "7")))
                        (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_5"))
                        (rule "simplifySelectOfAnon" (formula "3"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "20")) (ifInst ""  (formula "6")))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "2"))
                        (rule "applyEq" (formula "3") (term "0,2,0") (ifseqformula "16"))
                        (rule "close" (formula "19") (ifseqformula "3"))
                     )
                  )
                  (branch
                     (rule "allRight" (formula "15") (inst "sk=f_0"))
                     (rule "allRight" (formula "15") (inst "sk=o_0"))
                     (rule "orRight" (formula "15"))
                     (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                     (rule "applyEqReverse" (formula "17") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "closeTrue" (formula "17"))
                  )
               )
               (branch "if x_18 false"
                  (builtin "One Step Simplification" (formula "16"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100001_5" (formula "3") (term "1"))
                  (rule "compound_equality_comparison_1" (formula "15") (term "1") (inst "#v0=x_18"))
                  (rule "variableDeclarationAssign" (formula "15") (term "1"))
                  (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_21"))
                  (rule "eval_order_array_access4" (formula "15") (term "1") (inst "#v0=x_arr"))
                  (rule "variableDeclarationAssign" (formula "15") (term "1"))
                  (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_arr_7"))
                  (rule "assignment_read_attribute_this" (formula "15"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "replaceKnownSelect_taclet1_2" (formula "15") (term "0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "15") (term "0,1,0"))
                  (rule "assignment_array2" (formula "15"))
                  (branch "Normal Execution (x_arr_7 != null)"
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "pullOutSelect" (formula "15") (term "0,1,0") (inst "selectSK=arr_3"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "equality_comparison_simple" (formula "16") (term "1"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "eqSymm" (formula "16") (term "0,0,1,0"))
                     (rule "blockEmpty" (formula "16") (term "1"))
                     (rule "ifSplit" (formula "16"))
                     (branch "if x_17 true"
                        (builtin "One Step Simplification" (formula "17"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00100001_7" (formula "1") (term "1"))
                        (rule "assignment" (formula "16") (term "1"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "assignment" (formula "16") (term "1"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "blockBreakNoLabel" (formula "16") (term "1"))
                        (rule "blockBreakLabel" (formula "16") (term "1"))
                        (rule "blockEmpty" (formula "16") (term "1"))
                        (rule "tryEmpty" (formula "16") (term "1"))
                        (rule "methodCallEmpty" (formula "16") (term "1"))
                        (rule "emptyModality" (formula "16") (term "1"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "methodCallReturn" (formula "16") (term "1"))
                        (rule "assignment" (formula "16") (term "1"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "methodCallEmpty" (formula "16") (term "1"))
                        (rule "tryEmpty" (formula "16") (term "1"))
                        (rule "emptyModality" (formula "16") (term "1"))
                        (opengoal "!(  wellFormed(heapAtPre<<anonHeapFunction>>)   & heap = heapAtPre<<anonHeapFunction>>   & !self_5 = null   &   boolean::select(heap,                       self_5,                       java.lang.Object::<created>)     = TRUE   & Password::exactInstance(self_5) = TRUE   & (inInt(user_5) & inInt(password_5))   & java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,                             self_5)   & {_user_5:=user_5 || _password_5:=password_5}       \\[{           exc_5=null;try {             result_5=self_5.check(_user_5,_password_5)@Password;           }   catch (java.lang.Throwable e) {             exc_5=e;           }         }\\] (  selfAtPost_5 = self_5              & resultAtPost_5 = result_5              & excAtPost_5 = exc_5              & heapAtPost = heap)) ")
                     )
                     (branch "if x_17 false"
                        (builtin "One Step Simplification" (formula "17"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "blockEmpty" (formula "17") (term "1"))
                        (rule "postincrement" (formula "17") (term "1"))
                        (rule "compound_int_cast_expression" (formula "17") (term "1") (inst "#v=x"))
                        (rule "variableDeclarationAssign" (formula "17") (term "1"))
                        (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_22"))
                        (rule "unusedLabel" (formula "17") (term "1"))
                        (rule "remove_parentheses_right" (formula "17") (term "1"))
                        (rule "assignmentAdditionInt" (formula "17") (term "1"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "translateJavaAddInt" (formula "17") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "0,1,0"))
                        (rule "widening_identity_cast_5" (formula "17") (term "1"))
                        (rule "assignment" (formula "17") (term "1"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "tryEmpty" (formula "17") (term "1"))
                        (rule "methodCallEmpty" (formula "17") (term "1"))
                        (rule "emptyModality" (formula "17") (term "1"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "replaceKnownSelect_taclet1_0" (formula "17") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "17") (term "0,1,0,1"))
                        (rule "replaceKnownSelect_taclet1_0" (formula "17") (term "0,0,1,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "17") (term "0,0,1,0,0,0"))
                        (rule "replaceKnownSelect_taclet1_0" (formula "17") (term "1,0,0,0,1,0,1,0,0"))
                        (rule "replaceKnownSelect_taclet1_2" (formula "17") (term "1,0,0,1,1,0,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "17") (term "1,0,0,0,1,0,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "17") (term "1,0,0,1,1,0,1,0,0"))
                        (rule "eqSymm" (formula "17") (term "1,0,0,1,0"))
                        (rule "replace_known_left" (formula "17") (term "1,0,0,0") (ifseqformula "6"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "17") (term "0,0,1"))
                        (rule "polySimp_rightDist" (formula "17") (term "0,0,1"))
                        (rule "mul_literals" (formula "17") (term "0,0,0,1"))
                        (rule "precOfInt" (formula "17") (term "1"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,1"))
                        (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0,1,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "0,1,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,1,1"))
                        (rule "polySimp_addComm1" (formula "17") (term "0,0,1,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "17") (term "0,1,1"))
                        (rule "add_literals" (formula "17") (term "1,1,0,1,1"))
                        (rule "times_zero_1" (formula "17") (term "1,0,1,1"))
                        (rule "add_zero_right" (formula "17") (term "0,1,1"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,1,1"))
                        (rule "polySimp_addComm1" (formula "17") (term "0,0,1,1"))
                        (rule "add_literals" (formula "17") (term "0,0,0,1,1"))
                        (rule "add_zero_left" (formula "17") (term "0,0,1,1"))
                        (rule "polySimp_pullOutFactor1" (formula "17") (term "0,1,1"))
                        (rule "add_literals" (formula "17") (term "1,0,1,1"))
                        (rule "times_zero_1" (formula "17") (term "0,1,1"))
                        (rule "leq_literals" (formula "17") (term "1,1"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "inEqSimp_homoInEq0" (formula "17") (term "1"))
                        (rule "mul_literals" (formula "17") (term "1,0,1"))
                        (rule "add_zero_right" (formula "17") (term "0,1"))
                        (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "8"))
                        (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "8"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "16"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "8"))
                        (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "15"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "ifthenelse_negated" (formula "4") (term "0"))
                        (rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
                        (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "8"))
                        (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "14") (term "1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "eqSymm" (formula "13"))
                        (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "7"))
                        (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "7"))
                        (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0"))
                        (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,1"))
                        (rule "mul_literals" (formula "16") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,1"))
                        (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "inEqSimp_subsumption1" (formula "16") (term "0,0") (ifseqformula "11"))
                        (rule "leq_literals" (formula "16") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "andRight" (formula "16"))
                        (branch
                           (rule "allRight" (formula "16") (inst "sk=j_3"))
                           (rule "cutUpperBound" (formula "16") (ifseqformula "12"))
                           (branch
                              (rule "crossInst" (formula "13") (inst "sk=j_5") (ifseqformula "17"))
                              (rule "orRight" (formula "18"))
                              (rule "andLeft" (formula "13"))
                              (rule "orRight" (formula "20"))
                              (rule "orRight" (formula "19"))
                              (rule "notRight" (formula "22"))
                              (rule "notRight" (formula "22"))
                              (rule "inEqSimp_leqRight" (formula "21"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "22"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "applyEqRigid" (formula "1") (term "1,0") (ifseqformula "5"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "leq_literals" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch
                              (rule "crossInst" (formula "13") (inst "sk=j_4") (ifseqformula "17"))
                              (rule "orRight" (formula "18"))
                              (rule "notLeft" (formula "1"))
                              (rule "andLeft" (formula "12"))
                              (rule "orRight" (formula "20"))
                              (rule "orRight" (formula "19"))
                              (rule "notRight" (formula "22"))
                              (rule "notRight" (formula "22"))
                              (rule "inEqSimp_leqRight" (formula "21"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "22"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "applyEq" (formula "17") (term "0,1,0,0") (ifseqformula "16"))
                              (rule "applyEq" (formula "17") (term "0,2,0,0,1") (ifseqformula "16"))
                              (rule "replace_known_left" (formula "17") (term "0,1") (ifseqformula "4"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "applyEq" (formula "17") (term "0,2,0,0,1") (ifseqformula "16"))
                              (rule "replace_known_left" (formula "17") (term "0,1") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "16"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "inEqSimp_contradEq3" (formula "19") (ifseqformula "1"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,0,0"))
                              (rule "mul_literals" (formula "19") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "19") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0"))
                              (rule "add_literals" (formula "19") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "19") (term "1,0,0"))
                              (rule "add_zero_right" (formula "19") (term "0,0"))
                              (rule "qeq_literals" (formula "19") (term "0"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "false_right" (formula "19"))
                              (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "17") (term "0,0"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_6"))
                              (rule "simplifySelectOfAnon" (formula "4"))
                              (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "22")) (ifInst ""  (formula "7")))
                              (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_7"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "21")) (ifInst ""  (formula "6")))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "1"))
                              (rule "applyEqRigid" (formula "3") (term "0,2,0") (ifseqformula "17"))
                              (rule "applyEq" (formula "3") (term "0,2,0") (ifseqformula "16"))
                              (rule "close" (formula "19") (ifseqformula "3"))
                           )
                        )
                        (branch
                           (rule "allRight" (formula "16") (inst "sk=f_1"))
                           (rule "allRight" (formula "16") (inst "sk=o_1"))
                           (rule "orRight" (formula "16"))
                           (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=f_1_0"))
                           (rule "simplifySelectOfAnon" (formula "1"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                           (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "closeTrue" (formula "18"))
                        )
                     )
                  )
                  (branch "Null Reference (x_arr_7 = null)"
                     (builtin "One Step Simplification" (formula "1"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "false_right" (formula "16"))
                     (rule "applyEq" (formula "13") (term "1,0,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "8"))
                     (rule "close" (formula "15") (ifseqformula "1"))
                  )
                  (branch
                     (opengoal "!(  wellFormed(heapAtPre<<anonHeapFunction>>)   & heap = heapAtPre<<anonHeapFunction>>   & !self_5 = null   &   boolean::select(heap,                       self_5,                       java.lang.Object::<created>)     = TRUE   & Password::exactInstance(self_5) = TRUE   & (inInt(user_5) & inInt(password_5))   & java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,                             self_5)   & {_user_5:=user_5 || _password_5:=password_5}       \\[{           exc_5=null;try {             result_5=self_5.check(_user_5,_password_5)@Password;           }   catch (java.lang.Throwable e) {             exc_5=e;           }         }\\] (  selfAtPost_5 = self_5              & resultAtPost_5 = result_5              & excAtPost_5 = exc_5              & heapAtPost = heap)) ")
                  )
               )
            )
            (branch "Null Reference (x_arr_6 = null)"
               (builtin "One Step Simplification" (formula "1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "false_right" (formula "12"))
               (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "4"))
               (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
               (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "4"))
               (rule "close" (formula "10") (ifseqformula "1"))
            )
            (branch "Index Out of Bounds (x_arr_6 != null, but i Out of Bounds!)"
               (builtin "One Step Simplification" (formula "1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "false_right" (formula "12"))
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "4"))
               (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
               (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "4"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "1,1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "leq_literals" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "1"))
               (rule "qeq_literals" (formula "8") (term "0"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "closeFalse" (formula "8"))
            )
         )
         (branch "if x_14 false"
            (builtin "One Step Simplification" (formula "12"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (x_arr_5 = null)"
         (builtin "One Step Simplification" (formula "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "false_right" (formula "12"))
         (rule "applyEq" (formula "9") (term "1,0,0,1,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
         (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "4"))
         (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "4"))
         (rule "close" (formula "10") (ifseqformula "1"))
      )
   )
   (branch "Null Reference (x_arr_1 = null)"
      (builtin "One Step Simplification" (formula "10"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "false_right" (formula "10"))
      (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_4"))
      (rule "compound_less_than_comparison_2" (formula "12") (term "1") (inst "#v1=x_6") (inst "#v0=x_5"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_5"))
      (rule "assignment" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_6"))
      (rule "eval_order_access2" (formula "12") (term "1") (inst "#v0=x_arr"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_arr_2"))
      (rule "assignment_read_attribute_this" (formula "12"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "replaceKnownSelect_taclet1_0" (formula "12") (term "0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "12") (term "0,1,0"))
      (rule "assignment_read_length" (formula "12"))
      (branch "Normal Execution (x_arr_2 != null)"
         (builtin "One Step Simplification" (formula "12"))
         (rule "less_than_comparison_simple" (formula "12") (term "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,0"))
         (rule "arrayLengthNotNegative" (formula "8") (term "0"))
         (rule "arrayLengthIsAShort" (formula "9") (term "0"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "ifSplit" (formula "13"))
         (branch "if x_4 true"
            (builtin "One Step Simplification" (formula "14"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
            (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
            (rule "add_literals" (formula "10") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0"))
            (rule "add_literals" (formula "10") (term "0,0"))
            (rule "qeq_literals" (formula "10") (term "0"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "unusedLabel" (formula "13") (term "1"))
            (rule "ifUnfold" (formula "13") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_7"))
            (rule "compound_assignment_3_nonsimple" (formula "13") (term "1"))
            (rule "ifElseUnfold" (formula "13") (term "1") (inst "#boolv=x_8"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_8"))
            (rule "compound_assignment_2" (formula "13") (term "1") (inst "#v=x_9"))
            (rule "variableDeclarationAssign" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_9"))
            (rule "compound_equality_comparison_1" (formula "13") (term "1") (inst "#v0=x_10"))
            (rule "variableDeclarationAssign" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_10"))
            (rule "eval_order_array_access4" (formula "13") (term "1") (inst "#v0=x_arr"))
            (rule "variableDeclarationAssign" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_arr_3"))
            (rule "assignment_read_attribute_this" (formula "13"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "replaceKnownSelect_taclet1_0" (formula "13") (term "0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "13") (term "0,1,0"))
            (rule "assignment_array2" (formula "13"))
            (branch "Normal Execution (x_arr_3 != null)"
               (builtin "One Step Simplification" (formula "13"))
               (rule "pullOutSelect" (formula "13") (term "0,1,0") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfAnon" (formula "1"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00011_5" (formula "13") (term "0,1,0"))
               (rule "equality_comparison_simple" (formula "13") (term "1"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "compound_assignment_1_new" (formula "13") (term "1"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "0") (ifseqformula "3"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "12"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "0") (ifseqformula "4"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "14"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "ifElseSplit" (formula "15"))
               (branch "if x_8 true"
                  (builtin "One Step Simplification" (formula "16"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "ifSkipThen" (formula "16") (term "1"))
                  (rule "assignment" (formula "16") (term "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "blockEmpty" (formula "16") (term "1"))
                  (rule "unusedLabel" (formula "16") (term "1"))
                  (rule "postincrement" (formula "16") (term "1"))
                  (rule "compound_int_cast_expression" (formula "16") (term "1") (inst "#v=x"))
                  (rule "variableDeclarationAssign" (formula "16") (term "1"))
                  (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_13"))
                  (rule "remove_parentheses_right" (formula "16") (term "1"))
                  (rule "assignmentAdditionInt" (formula "16") (term "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
                  (rule "polySimp_addComm0" (formula "16") (term "0,1,0"))
                  (rule "widening_identity_cast_5" (formula "16") (term "1"))
                  (rule "assignment" (formula "16") (term "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "tryEmpty" (formula "16") (term "1"))
                  (rule "methodCallEmpty" (formula "16") (term "1"))
                  (rule "emptyModality" (formula "16") (term "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "replaceKnownSelect_taclet1_0" (formula "16") (term "0,1,0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "16") (term "0,1,0,1"))
                  (rule "replaceKnownSelect_taclet1_0" (formula "16") (term "0,0,1,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "16") (term "0,0,1,0,0,0"))
                  (rule "replaceKnownSelect_taclet1_0" (formula "16") (term "1,0,0,0,1,0,1,0,0"))
                  (rule "replaceKnownSelect_taclet1_2" (formula "16") (term "1,0,0,1,1,0,1,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "16") (term "1,0,0,0,1,0,1,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "16") (term "1,0,0,1,1,0,1,0,0"))
                  (rule "eqSymm" (formula "16") (term "1,0,0,1,0"))
                  (rule "replace_known_left" (formula "16") (term "1,0,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "polySimp_mulComm0" (formula "16") (term "0,0,1"))
                  (rule "polySimp_rightDist" (formula "16") (term "0,0,1"))
                  (rule "mul_literals" (formula "16") (term "0,0,0,1"))
                  (rule "precOfInt" (formula "16") (term "1"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,1"))
                  (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0,0,1,1"))
                  (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0,1,1"))
                  (rule "polySimp_addComm1" (formula "16") (term "0,0,1,1"))
                  (rule "polySimp_pullOutFactor2b" (formula "16") (term "0,1,1"))
                  (rule "add_literals" (formula "16") (term "1,1,0,1,1"))
                  (rule "times_zero_1" (formula "16") (term "1,0,1,1"))
                  (rule "add_zero_right" (formula "16") (term "0,1,1"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0,1,1"))
                  (rule "polySimp_addComm1" (formula "16") (term "0,0,1,1"))
                  (rule "add_literals" (formula "16") (term "0,0,0,1,1"))
                  (rule "add_zero_left" (formula "16") (term "0,0,1,1"))
                  (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1,1"))
                  (rule "add_literals" (formula "16") (term "1,0,1,1"))
                  (rule "times_zero_1" (formula "16") (term "0,1,1"))
                  (rule "leq_literals" (formula "16") (term "1,1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "inEqSimp_homoInEq0" (formula "16") (term "1"))
                  (rule "times_zero_2" (formula "16") (term "1,0,1"))
                  (rule "add_zero_right" (formula "16") (term "0,1"))
                  (rule "applyEq" (formula "16") (term "0,1,0,1") (ifseqformula "4"))
                  (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "4"))
                  (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "6"))
                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
                  (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "6"))
                  (rule "close" (formula "14") (ifseqformula "4"))
               )
               (branch "if x_8 false"
                  (builtin "One Step Simplification" (formula "16"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "compound_equality_comparison_1" (formula "16") (term "1") (inst "#v0=x_8"))
                  (rule "variableDeclarationAssign" (formula "16") (term "1"))
                  (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_11"))
                  (rule "eval_order_array_access4" (formula "16") (term "1") (inst "#v0=x_arr"))
                  (rule "variableDeclarationAssign" (formula "16") (term "1"))
                  (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_arr_4"))
                  (rule "assignment_read_attribute_this" (formula "16"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "replaceKnownSelect_taclet1_2" (formula "16") (term "0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "16") (term "0,1,0"))
                  (rule "assignment_array2" (formula "16"))
                  (branch "Normal Execution (x_arr_4 != null)"
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "pullOutSelect" (formula "16") (term "0,1,0") (inst "selectSK=arr_1"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "equality_comparison_simple" (formula "17") (term "1"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "eqSymm" (formula "17") (term "0,0,1,0"))
                     (rule "blockEmpty" (formula "17") (term "1"))
                     (rule "ifSplit" (formula "17"))
                     (branch "if x_7 true"
                        (builtin "One Step Simplification" (formula "18"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00100011_7" (formula "1") (term "1"))
                        (rule "assignment" (formula "17") (term "1"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "assignment" (formula "17") (term "1"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "blockBreakNoLabel" (formula "17") (term "1"))
                        (rule "blockBreakLabel" (formula "17") (term "1"))
                        (rule "blockEmpty" (formula "17") (term "1"))
                        (rule "tryEmpty" (formula "17") (term "1"))
                        (rule "methodCallEmpty" (formula "17") (term "1"))
                        (rule "emptyModality" (formula "17") (term "1"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "methodCallReturn" (formula "17") (term "1"))
                        (rule "assignment" (formula "17") (term "1"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "methodCallEmpty" (formula "17") (term "1"))
                        (rule "tryEmpty" (formula "17") (term "1"))
                        (rule "emptyModality" (formula "17") (term "1"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "notRight" (formula "17"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "eqSymm" (formula "4"))
                        (rule "eqSymm" (formula "3"))
                        (rule "eqSymm" (formula "2"))
                        (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "5") (term "1,1,0,0,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "18") (term "1,0,0,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "5") (term "1,1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "12"))
                        (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "20"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "ifthenelse_negated" (formula "5") (term "0"))
                        (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "20") (term "1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
                        (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "21") (term "0") (ifseqformula "1"))
                        (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "18") (term "0,0,0,1,0") (ifseqformula "4"))
                        (rule "applyEq" (formula "18") (term "0,0,0,1,0,0") (ifseqformula "4"))
                        (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "8") (term "1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "1"))
                        (rule "close" (formula "19") (ifseqformula "10"))
                     )
                     (branch "if x_7 false"
                        (builtin "One Step Simplification" (formula "18"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "blockEmpty" (formula "18") (term "1"))
                        (rule "unusedLabel" (formula "18") (term "1"))
                        (rule "postincrement" (formula "18") (term "1"))
                        (rule "compound_int_cast_expression" (formula "18") (term "1") (inst "#v=x"))
                        (rule "variableDeclarationAssign" (formula "18") (term "1"))
                        (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_12"))
                        (rule "remove_parentheses_right" (formula "18") (term "1"))
                        (rule "assignmentAdditionInt" (formula "18") (term "1"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "translateJavaAddInt" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "0,1,0"))
                        (rule "widening_identity_cast_5" (formula "18") (term "1"))
                        (rule "assignment" (formula "18") (term "1"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "tryEmpty" (formula "18") (term "1"))
                        (rule "methodCallEmpty" (formula "18") (term "1"))
                        (rule "emptyModality" (formula "18") (term "1"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "replaceKnownSelect_taclet1_0" (formula "18") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "18") (term "0,1,0,1"))
                        (rule "replaceKnownSelect_taclet1_0" (formula "18") (term "0,0,1,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "18") (term "0,0,1,0,0,0"))
                        (rule "replaceKnownSelect_taclet1_0" (formula "18") (term "1,0,0,0,1,0,1,0,0"))
                        (rule "replaceKnownSelect_taclet1_2" (formula "18") (term "1,0,0,1,1,0,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "18") (term "1,0,0,0,1,0,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "18") (term "1,0,0,1,1,0,1,0,0"))
                        (rule "eqSymm" (formula "18") (term "1,0,0,1,0"))
                        (rule "replace_known_left" (formula "18") (term "1,0,0,0") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "polySimp_mulComm0" (formula "18") (term "0,0,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "0,0,1"))
                        (rule "mul_literals" (formula "18") (term "0,0,0,1"))
                        (rule "precOfInt" (formula "18") (term "1"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,1"))
                        (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0,1,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1,1"))
                        (rule "polySimp_addComm1" (formula "18") (term "0,0,1,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "18") (term "0,1,1"))
                        (rule "add_literals" (formula "18") (term "1,1,0,1,1"))
                        (rule "times_zero_1" (formula "18") (term "1,0,1,1"))
                        (rule "add_zero_right" (formula "18") (term "0,1,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1,1"))
                        (rule "polySimp_addComm1" (formula "18") (term "0,0,1,1"))
                        (rule "add_literals" (formula "18") (term "0,0,0,1,1"))
                        (rule "add_zero_left" (formula "18") (term "0,0,1,1"))
                        (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,1"))
                        (rule "add_literals" (formula "18") (term "1,0,1,1"))
                        (rule "times_zero_1" (formula "18") (term "0,1,1"))
                        (rule "leq_literals" (formula "18") (term "1,1"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "inEqSimp_homoInEq0" (formula "18") (term "1"))
                        (rule "times_zero_2" (formula "18") (term "1,0,1"))
                        (rule "add_zero_right" (formula "18") (term "0,1"))
                        (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "8"))
                        (rule "close" (formula "16") (ifseqformula "6"))
                     )
                  )
                  (branch "Null Reference (x_arr_4 = null)"
                     (builtin "One Step Simplification" (formula "1"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "false_right" (formula "17"))
                     (rule "applyEq" (formula "14") (term "1,0,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "6"))
                     (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "6"))
                     (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "14") (term "1,0,0,1,0,0") (ifseqformula "6"))
                     (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "8"))
                     (rule "close" (formula "15") (ifseqformula "6"))
                  )
                  (branch "Index Out of Bounds (x_arr_4 != null, but i Out of Bounds!)"
                     (builtin "One Step Simplification" (formula "1"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "false_right" (formula "17"))
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "applyEq" (formula "14") (term "1,0,0,1,0,0") (ifseqformula "6"))
                     (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "6"))
                     (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "8"))
                     (rule "close" (formula "16") (ifseqformula "6"))
                  )
               )
            )
            (branch "Null Reference (x_arr_3 = null)"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
               (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "1"))
               (rule "false_right" (formula "13"))
               (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
               (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
               (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "2"))
               (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "4"))
               (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "4"))
               (rule "close" (formula "11") (ifseqformula "2"))
            )
            (branch "Index Out of Bounds (x_arr_3 != null, but i Out of Bounds!)"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "if x_4 false"
            (builtin "One Step Simplification" (formula "14"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "inEqSimp_geqRight" (formula "11"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "blockEmptyLabel" (formula "14") (term "1"))
            (rule "blockEmpty" (formula "14") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
            (rule "polySimp_elimOne" (formula "1") (term "1"))
            (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
            (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "1"))
            (rule "times_zero_1" (formula "9") (term "0,0"))
            (rule "add_zero_left" (formula "9") (term "0"))
            (rule "tryEmpty" (formula "15") (term "1"))
            (rule "methodCallEmpty" (formula "15") (term "1"))
            (rule "emptyModality" (formula "15") (term "1"))
            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "8")))
            (rule "replaceKnownSelect_taclet1_0" (formula "15") (term "0,1,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "15") (term "0,1,0,1"))
            (rule "replaceKnownSelect_taclet1_0" (formula "15") (term "0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "15") (term "0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1_0" (formula "15") (term "1,0,0,0,1,0,1,0,0"))
            (rule "replaceKnownSelect_taclet1_2" (formula "15") (term "1,0,0,1,1,0,1,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "15") (term "1,0,0,0,1,0,1,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "15") (term "1,0,0,1,1,0,1,0,0"))
            (rule "eqSymm" (formula "15") (term "1,0,0,1,0"))
            (rule "replace_known_left" (formula "15") (term "0,0,0") (ifseqformula "11"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "precOfInt" (formula "15") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "1,1"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,1"))
            (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0,0,1,1"))
            (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,1,1"))
            (rule "polySimp_addComm1" (formula "15") (term "0,0,1,1"))
            (rule "polySimp_pullOutFactor2b" (formula "15") (term "0,1,1"))
            (rule "add_literals" (formula "15") (term "1,1,0,1,1"))
            (rule "times_zero_1" (formula "15") (term "1,0,1,1"))
            (rule "add_zero_right" (formula "15") (term "0,1,1"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,1,1"))
            (rule "add_literals" (formula "15") (term "1,1,0,1,1"))
            (rule "times_zero_1" (formula "15") (term "1,0,1,1"))
            (rule "add_literals" (formula "15") (term "0,1,1"))
            (rule "leq_literals" (formula "15") (term "1,1"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "false_right" (formula "15"))
            (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "2"))
            (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
            (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "4"))
            (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "2"))
            (rule "applyEq" (formula "12") (term "1,0,0,1,0,0") (ifseqformula "2"))
            (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "4"))
            (rule "close" (formula "13") (ifseqformula "2"))
         )
      )
      (branch "Null Reference (x_arr_2 = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
         (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "1"))
         (rule "false_right" (formula "12"))
         (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "3"))
         (rule "applyEq" (formula "9") (term "1,0,0,1,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "3"))
         (rule "close" (formula "10") (ifseqformula "1"))
      )
   )
)
(branch "Use Case"
   (builtin "One Step Simplification" (formula "6"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "6"))
   (rule "inEqSimp_commuteLeq" (formula "7"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
   (rule "pullOutSelect" (formula "8") (term "1,0,0,0,1,0") (inst "selectSK=Password_names_0"))
   (rule "simplifySelectOfAnon" (formula "8"))
   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "13")) (ifInst ""  (formula "3")))
   (rule "replaceKnownSelect_taclet2_0" (formula "7") (term "0,0"))
   (rule "hideAuxiliaryEq" (formula "8"))
   (rule "replaceKnownAuxiliaryConstant_taclet2_1" (formula "7") (term "0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet2_1" (formula "8") (term "1,0,0,0,1,0"))
   (rule "pullOutSelect" (formula "8") (term "1,0,1,0,1,0") (inst "selectSK=Password_passwords_0"))
   (rule "simplifySelectOfAnon" (formula "8"))
   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "13")) (ifInst ""  (formula "3")))
   (rule "hideAuxiliaryEq" (formula "8"))
   (rule "replaceKnownAuxiliaryConstant_taclet2_3" (formula "8") (term "1,0,1,0,1,0"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_notAnd" (formula "8") (term "1,0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
   (rule "shift_paren_or" (formula "8") (term "0"))
   (rule "compound_less_than_comparison_2" (formula "11") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x"))
   (rule "assignment" (formula "11") (term "1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_1"))
   (rule "eval_order_access2" (formula "11") (term "1") (inst "#v0=x_arr"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_arr"))
   (rule "assignment_read_attribute_this" (formula "11"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "replaceKnownSelect_taclet2_0" (formula "11") (term "0,1,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet2_1" (formula "11") (term "0,1,0"))
   (rule "assignment_read_length" (formula "11"))
   (branch "Normal Execution (x_arr != null)"
      (builtin "One Step Simplification" (formula "11"))
      (rule "less_than_comparison_simple" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0"))
      (rule "methodCallEmpty" (formula "11") (term "1"))
      (rule "emptyModality" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "impRight" (formula "11"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_geqRight" (formula "9"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
      (rule "polySimp_elimOne" (formula "1") (term "1"))
      (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "1"))
      (rule "methodCallReturn" (formula "13") (term "1"))
      (rule "assignment" (formula "13") (term "1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "methodCallEmpty" (formula "13") (term "1"))
      (rule "tryEmpty" (formula "13") (term "1"))
      (rule "emptyModality" (formula "13") (term "1"))
      (opengoal "!(  wellFormed(heapAtPre<<anonHeapFunction>>)   & heap = heapAtPre<<anonHeapFunction>>   & !self_5 = null   &   boolean::select(heap,                       self_5,                       java.lang.Object::<created>)     = TRUE   & Password::exactInstance(self_5) = TRUE   & (inInt(user_5) & inInt(password_5))   & java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,                             self_5)   & {_user_5:=user_5 || _password_5:=password_5}       \\[{           exc_5=null;try {             result_5=self_5.check(_user_5,_password_5)@Password;           }   catch (java.lang.Throwable e) {             exc_5=e;           }         }\\] (  selfAtPost_5 = self_5              & resultAtPost_5 = result_5              & excAtPost_5 = exc_5              & heapAtPost = heap)) ")
   )
   (branch "Null Reference (x_arr = null)"
      (builtin "One Step Simplification" (formula "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "false_right" (formula "12"))
      (rule "applyEq" (formula "9") (term "1,0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "3"))
      (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "3"))
      (rule "close" (formula "10") (ifseqformula "1"))
   )
)
)

}
