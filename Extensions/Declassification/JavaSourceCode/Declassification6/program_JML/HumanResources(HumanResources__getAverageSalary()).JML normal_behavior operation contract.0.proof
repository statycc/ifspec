\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Mar 27 18:29:46 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Mon Mar 27 18:29:46 CEST 2017
name=HumanResources[HumanResources\\:\\:getAverageSalary()].JML normal_behavior operation contract.0
contract=HumanResources[HumanResources\\:\\:getAverageSalary()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "90dde5a1f3b2857ec76a728ce080f1a88f0e4aa7"))

(autoModeTime "432")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "self_12,result_12,exc_12,heapAtPre_0,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "7"))
(rule "Class_invariant_axiom_for_HumanResources" (formula "5") (ifseqformula "3"))
(rule "notLeft" (formula "5"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_getAverageSalary,savedHeapBefore_getAverageSalary"))
(builtin "One Step Simplification" (formula "7"))
(rule "unusedLabel" (formula "7") (term "1"))
(rule "ifUnfold" (formula "7") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x"))
(rule "compound_equality_comparison_1" (formula "7") (term "1") (inst "#v0=x_1"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x_1"))
(rule "eval_order_array_access6" (formula "7") (term "1") (inst "#v0=x_arr"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x_arr"))
(rule "assignment_read_attribute_this" (formula "7"))
(builtin "One Step Simplification" (formula "7"))
(rule "assignment_read_length" (formula "7"))
(branch "Normal Execution (x_arr != null)"
   (builtin "One Step Simplification" (formula "7"))
   (rule "equality_comparison_simple" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "ifSplit" (formula "7"))
   (branch "if x true"
      (builtin "One Step Simplification" (formula "8"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "methodCallReturn" (formula "8") (term "1"))
      (rule "assignment" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "methodCallEmpty" (formula "8") (term "1"))
      (rule "tryEmpty" (formula "8") (term "1"))
      (rule "emptyModality" (formula "8") (term "1"))
      (rule "andRight" (formula "8"))
      (branch "Case 1"
         (builtin "One Step Simplification" (formula "8"))
         (rule "Class_invariant_axiom_for_HumanResources" (formula "8") (ifseqformula "4"))
         (rule "notRight" (formula "8"))
         (rule "close" (formula "7") (ifseqformula "1"))
      )
      (branch "Case 2"
         (builtin "One Step Simplification" (formula "8"))
         (rule "closeTrue" (formula "8"))
      )
   )
   (branch "if x false"
      (builtin "One Step Simplification" (formula "8"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "sum_1"))
      (rule "assignment" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "for_to_while" (formula "8") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "i"))
      (rule "assignment" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (builtin "Loop Invariant" (formula "8") (newnames "variant,b,heapBefore_LOOP,iBefore_LOOP,sum_1Before_LOOP,i_0,sum_1_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
      (branch "Invariant Initially Valid"
         (rule "andRight" (formula "8"))
         (branch "Case 1"
            (rule "andRight" (formula "8"))
            (branch "Case 1"
               (rule "andRight" (formula "8"))
               (branch "Case 1"
                  (rule "andRight" (formula "8"))
                  (branch "Case 1"
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "leq_literals" (formula "8"))
                     (rule "closeTrue" (formula "8"))
                  )
                  (branch "Case 2"
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_leqRight" (formula "8"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_contradEq3" (formula "6") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "6") (term "1,0,0"))
                     (rule "add_zero_right" (formula "6") (term "0,0"))
                     (rule "qeq_literals" (formula "6") (term "0"))
                     (builtin "One Step Simplification" (formula "6"))
                     (rule "false_right" (formula "6"))
                     (rule "arrayLengthIsAShort" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Case 2"
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "bsum_lower_equals_upper" (formula "8") (term "0,1"))
                  (rule "translateJavaCastInt" (formula "8") (term "1"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "closeTrue" (formula "8"))
               )
            )
            (branch "Case 2"
               (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_gtRight" (formula "8"))
               (rule "times_zero_1" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "6"))
               (rule "add_zero_right" (formula "1") (term "1"))
               (rule "inEqSimp_contradEq3" (formula "6") (ifseqformula "1"))
               (rule "times_zero_1" (formula "6") (term "1,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0"))
               (rule "qeq_literals" (formula "6") (term "0"))
               (builtin "One Step Simplification" (formula "6"))
               (rule "false_right" (formula "6"))
               (rule "arrayLengthNotNegative" (formula "1") (term "0"))
               (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
               (rule "qeq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Case 2"
            (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")))
            (rule "closeTrue" (formula "8"))
         )
      )
      (branch "Body Preserves Invariant"
         (builtin "One Step Simplification" (formula "10"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "translateJavaSubInt" (formula "10") (term "0,1,1,1,0,1"))
         (rule "translateJavaCastInt" (formula "10") (term "1,1,0,0,0,1,1,0,1,1"))
         (rule "translateJavaSubInt" (formula "10") (term "0,1,1,1,0,1,1"))
         (rule "translateJavaCastInt" (formula "6") (term "1,1,0"))
         (rule "impRight" (formula "10"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "eqSymm" (formula "14") (term "1,0,0,1,0,1,1,0,1"))
         (rule "eqSymm" (formula "14") (term "1,0,0,0,1,1,0,1"))
         (rule "eqSymm" (formula "9"))
         (rule "polySimp_elimSub" (formula "14") (term "0,1,1,1,0,1"))
         (rule "polySimp_elimSub" (formula "14") (term "0,1,1,1,0"))
         (rule "polySimp_addComm0" (formula "14") (term "0,1,1,1,0,1"))
         (rule "polySimp_addComm0" (formula "14") (term "0,1,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0,0,1,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,0,0,1,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "7"))
         (rule "inEqSimp_commuteLeq" (formula "8"))
         (rule "pullOutSelect" (formula "14") (term "0,1,0,1,1,1,0") (inst "selectSK=HumanResources_salaries_1"))
         (rule "applyEq" (formula "10") (term "1,2,0") (ifseqformula "1"))
         (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnon" (formula "1"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "4")))
         (rule "applyEqReverse" (formula "15") (term "0,1,0,1,1,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "10") (term "1,2,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "11") (term "0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "9") (term "0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "variableDeclarationAssign" (formula "1") (term "1"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_2"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "exc_13"))
         (rule "assignment" (formula "14") (term "1"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "thrownExc"))
         (rule "blockThrow" (formula "14") (term "1,0,0,1"))
         (rule "blockThrow" (formula "14") (term "1,0,0,1"))
         (rule "boxToDiamond" (formula "1") (term "1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "compound_less_than_comparison_2" (formula "10") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
         (rule "variableDeclarationAssign" (formula "10") (term "1"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_7"))
         (rule "assignment" (formula "10") (term "1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "variableDeclarationAssign" (formula "10") (term "1"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_8"))
         (rule "eval_order_access2" (formula "10") (term "1") (inst "#v0=x_arr"))
         (rule "variableDeclarationAssign" (formula "10") (term "1"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_arr_3"))
         (rule "assignment_read_attribute_this" (formula "10"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "replaceKnownSelect_taclet110_0" (formula "10") (term "0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet110_1" (formula "10") (term "0,1,0"))
         (rule "assignment_read_length" (formula "10"))
         (branch "Normal Execution (x_arr_3 != null)"
            (builtin "One Step Simplification" (formula "10"))
            (rule "less_than_comparison_simple" (formula "10") (term "1"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "methodCallEmpty" (formula "10") (term "1"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "emptyModality" (formula "10") (term "1"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "notRight" (formula "10"))
            (rule "ifUnfold" (formula "14") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_9"))
            (rule "compound_less_than_comparison_2" (formula "14") (term "1") (inst "#v1=x_11") (inst "#v0=x_10"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_10"))
            (rule "assignment" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_11"))
            (rule "eval_order_access2" (formula "14") (term "1") (inst "#v0=x_arr"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_arr_4"))
            (rule "assignment_read_attribute_this" (formula "14"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "replaceKnownSelect_taclet110_0" (formula "14") (term "0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet110_1" (formula "14") (term "0,1,0"))
            (rule "assignment_read_length" (formula "14"))
            (branch "Normal Execution (x_arr_4 != null)"
               (builtin "One Step Simplification" (formula "14"))
               (rule "less_than_comparison_simple" (formula "14") (term "1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "replace_known_left" (formula "14") (term "0,0,1,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "arrayLengthNotNegative" (formula "11") (term "0"))
               (rule "arrayLengthIsAShort" (formula "12") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "ifSplit" (formula "15"))
               (branch "if x_9 true"
                  (builtin "One Step Simplification" (formula "16"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "compound_assignment_op_plus" (formula "15") (term "1"))
                  (rule "compound_int_cast_expression" (formula "15") (term "1") (inst "#v=x"))
                  (rule "variableDeclarationAssign" (formula "15") (term "1"))
                  (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_12"))
                  (rule "remove_parentheses_right" (formula "15") (term "1"))
                  (rule "compound_addition_2" (formula "15") (term "1") (inst "#v1=x_14") (inst "#v0=x_13"))
                  (rule "variableDeclarationAssign" (formula "15") (term "1"))
                  (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_13"))
                  (rule "assignment" (formula "15") (term "1"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "variableDeclarationAssign" (formula "15") (term "1"))
                  (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_14"))
                  (rule "remove_parentheses_right" (formula "15") (term "1"))
                  (rule "eval_order_array_access4" (formula "15") (term "1") (inst "#v0=x_arr"))
                  (rule "variableDeclarationAssign" (formula "15") (term "1"))
                  (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_arr_5"))
                  (rule "assignment_read_attribute_this" (formula "15"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "replaceKnownSelect_taclet110_0" (formula "15") (term "0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet110_1" (formula "15") (term "0,1,0"))
                  (rule "assignment_array2" (formula "15"))
                  (branch "Normal Execution (x_arr_5 != null)"
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "pullOutSelect" (formula "15") (term "0,1,0") (inst "selectSK=arr_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "assignmentAdditionInt" (formula "16") (term "1"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "16") (term "0,1,0"))
                     (rule "widening_identity_cast_5" (formula "16") (term "1"))
                     (rule "assignment" (formula "16") (term "1"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "blockEmpty" (formula "16") (term "1"))
                     (rule "postincrement" (formula "16") (term "1"))
                     (rule "compound_int_cast_expression" (formula "16") (term "1") (inst "#v=x"))
                     (rule "variableDeclarationAssign" (formula "16") (term "1"))
                     (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_15"))
                     (rule "remove_parentheses_right" (formula "16") (term "1"))
                     (rule "assignmentAdditionInt" (formula "16") (term "1"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "16") (term "0,1,0"))
                     (rule "widening_identity_cast_5" (formula "16") (term "1"))
                     (rule "assignment" (formula "16") (term "1"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "tryEmpty" (formula "16") (term "1"))
                     (rule "methodCallEmpty" (formula "16") (term "1"))
                     (rule "emptyModality" (formula "16") (term "1"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "andRight" (formula "16"))
                     (branch "Case 1"
                        (rule "andRight" (formula "16"))
                        (branch "Case 1"
                           (rule "andRight" (formula "16"))
                           (branch "Case 1"
                              (rule "andRight" (formula "16"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "16"))
                                 (branch "Case 1"
                                    (rule "inEqSimp_geqRight" (formula "16"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "4"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0"))
                                    (rule "inEqSimp_gtToGeq" (formula "13"))
                                    (rule "times_zero_1" (formula "13") (term "1,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                                    (rule "mul_literals" (formula "13") (term "1"))
                                    (rule "inEqSimp_contradEq7" (formula "14") (ifseqformula "13"))
                                    (rule "times_zero_1" (formula "14") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "14") (term "0,0"))
                                    (rule "leq_literals" (formula "14") (term "0"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "false_right" (formula "14"))
                                    (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
                                    (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "11") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "11") (term "0,0"))
                                    (rule "qeq_literals" (formula "11") (term "0"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "12"))
                                    (rule "leq_literals" (formula "3") (term "0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "9") (term "0"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "closeFalse" (formula "9"))
                                 )
                                 (branch "Case 2"
                                    (rule "replaceKnownSelect_taclet110_0" (formula "16") (term "0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110_1" (formula "16") (term "0,0"))
                                    (rule "inEqSimp_geqRight" (formula "16"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "4"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0"))
                                    (rule "inEqSimp_gtToGeq" (formula "13"))
                                    (rule "times_zero_1" (formula "13") (term "1,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                                    (rule "mul_literals" (formula "13") (term "1"))
                                    (rule "inEqSimp_contradEq7" (formula "14") (ifseqformula "13"))
                                    (rule "times_zero_1" (formula "14") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "14") (term "0,0"))
                                    (rule "leq_literals" (formula "14") (term "0"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "false_right" (formula "14"))
                                    (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
                                    (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "11") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "11") (term "0,0"))
                                    (rule "qeq_literals" (formula "11") (term "0"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0"))
                                    (rule "add_zero_right" (formula "1") (term "0"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "replaceKnownSelect_taclet110_0" (formula "16") (term "1,2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet110_1" (formula "16") (term "1,2,0"))
                                 (rule "bsum_induction_upper_concrete" (formula "16") (term "0"))
                                 (rule "replaceKnownSelect_taclet0000110_2" (formula "16") (term "1,1,0"))
                                 (rule "polySimp_homoEq" (formula "16"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                                 (rule "polySimp_addComm0" (formula "16") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "16") (term "0"))
                                 (rule "inEqSimp_gtToGeq" (formula "12"))
                                 (rule "times_zero_1" (formula "12") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "12") (term "0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "3"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,0,0"))
                                 (rule "replace_known_left" (formula "16") (term "0,0,1,0,0") (ifseqformula "9"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "polySimp_addComm1" (formula "16") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "16") (term "0,0,0"))
                                 (rule "add_literals" (formula "16") (term "1,0,0,0"))
                                 (rule "times_zero_1" (formula "16") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "16") (term "0,0"))
                                 (rule "apply_eq_monomials" (formula "16") (term "1,0") (ifseqformula "11"))
                                 (rule "polySimp_rightDist" (formula "16") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "16") (term "1,0"))
                                 (rule "add_literals" (formula "16") (term "1,1,1,0"))
                                 (rule "times_zero_1" (formula "16") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "16") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "16") (term "0"))
                                 (rule "add_literals" (formula "16") (term "1,0"))
                                 (rule "times_zero_1" (formula "16") (term "0"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "closeTrue" (formula "16"))
                              )
                           )
                           (branch "Case 2"
                              (rule "replaceKnownSelect_taclet110_0" (formula "16") (term "0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet110_1" (formula "16") (term "0,0"))
                              (rule "close" (formula "16") (ifseqformula "12"))
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "16") (inst "sk=f_0"))
                           (rule "allRight" (formula "16") (inst "sk=o_0"))
                           (rule "orRight" (formula "16"))
                           (rule "eqSymm" (formula "17"))
                           (rule "inEqSimp_gtToGeq" (formula "12"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                           (rule "mul_literals" (formula "12") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_contradEq7" (formula "13") (ifseqformula "12"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0"))
                           (rule "leq_literals" (formula "13") (term "0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "false_right" (formula "13"))
                           (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                           (rule "add_literals" (formula "10") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0"))
                           (rule "qeq_literals" (formula "10") (term "0"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "11"))
                           (rule "leq_literals" (formula "2") (term "0"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "pullOutSelect" (formula "14") (term "0") (inst "selectSK=f_0_0"))
                           (rule "simplifySelectOfAnon" (formula "1"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "15") (term "0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "closeTrue" (formula "15"))
                        )
                     )
                     (branch "Case 2"
                        (rule "replaceKnownSelect_taclet110_0" (formula "16") (term "0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet110_1" (formula "16") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                        (rule "mul_literals" (formula "16") (term "0,0,0"))
                        (rule "precOfInt" (formula "16"))
                        (rule "inEqSimp_gtToGeq" (formula "12"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1"))
                        (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,1"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                        (rule "polySimp_addComm1" (formula "16") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "16") (term "0,1"))
                        (rule "add_literals" (formula "16") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "16") (term "1,0,1"))
                        (rule "add_zero_right" (formula "16") (term "0,1"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                        (rule "polySimp_addComm1" (formula "16") (term "0,0,1"))
                        (rule "add_literals" (formula "16") (term "0,0,0,1"))
                        (rule "add_zero_left" (formula "16") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1"))
                        (rule "add_literals" (formula "16") (term "1,0,1"))
                        (rule "times_zero_1" (formula "16") (term "0,1"))
                        (rule "leq_literals" (formula "16") (term "1"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "inEqSimp_leqRight" (formula "16"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                        (rule "mul_literals" (formula "13") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_contradEq7" (formula "14") (ifseqformula "13"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "leq_literals" (formula "14") (term "0"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "false_right" (formula "14"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "13"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Null Reference (x_arr_5 = null)"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Index Out of Bounds (x_arr_5 != null, but i Out of Bounds!)"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "false_right" (formula "16"))
                     (rule "inEqSimp_gtToGeq" (formula "12"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                     (rule "mul_literals" (formula "12") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "1,1"))
                     (rule "inEqSimp_contradEq7" (formula "13") (ifseqformula "12"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0"))
                     (rule "leq_literals" (formula "13") (term "0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "false_right" (formula "13"))
                     (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                     (rule "add_literals" (formula "10") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0"))
                     (rule "qeq_literals" (formula "10") (term "0"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "11"))
                     (rule "leq_literals" (formula "2") (term "0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "8"))
                     (rule "qeq_literals" (formula "1") (term "0,1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "if x_9 false"
                  (builtin "One Step Simplification" (formula "16"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Null Reference (x_arr_4 = null)"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Null Reference (x_arr_3 = null)"
            (builtin "One Step Simplification" (formula "11"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Use Case"
         (builtin "One Step Simplification" (formula "10"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "translateJavaCastInt" (formula "6") (term "1,1,0"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "eqSymm" (formula "8"))
         (rule "inEqSimp_commuteLeq" (formula "7"))
         (rule "inEqSimp_commuteLeq" (formula "6"))
         (rule "variableDeclarationAssign" (formula "13") (term "1"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "b_1"))
         (rule "blockEmpty" (formula "13") (term "1,0,1"))
         (rule "pullOutSelect" (formula "9") (term "0,0") (inst "selectSK=HumanResources_salaries_0"))
         (rule "applyEq" (formula "8") (term "1,2,0") (ifseqformula "9"))
         (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "9"))
         (rule "simplifySelectOfAnon" (formula "9"))
         (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "13")) (ifInst ""  (formula "2")))
         (rule "applyEqReverse" (formula "10") (term "0,0") (ifseqformula "9"))
         (rule "applyEqReverse" (formula "8") (term "1,2,0") (ifseqformula "9"))
         (rule "applyEqReverse" (formula "7") (term "0,0") (ifseqformula "9"))
         (rule "hideAuxiliaryEq" (formula "9"))
         (rule "compound_less_than_comparison_2" (formula "13") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
         (rule "variableDeclarationAssign" (formula "13") (term "1"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_2"))
         (rule "assignment" (formula "13") (term "1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "variableDeclarationAssign" (formula "13") (term "1"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_3"))
         (rule "eval_order_access2" (formula "13") (term "1") (inst "#v0=x_arr"))
         (rule "variableDeclarationAssign" (formula "13") (term "1"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_arr_1"))
         (rule "assignment_read_attribute_this" (formula "13"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "replaceKnownSelect_taclet210_0" (formula "13") (term "0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet210_1" (formula "13") (term "0,1,0"))
         (rule "assignment_read_length" (formula "13"))
         (branch "Normal Execution (x_arr_1 != null)"
            (builtin "One Step Simplification" (formula "13"))
            (rule "less_than_comparison_simple" (formula "13") (term "1"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "methodCallEmpty" (formula "13") (term "1"))
            (rule "emptyModality" (formula "13") (term "1"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "impRight" (formula "13"))
            (rule "notLeft" (formula "1"))
            (rule "returnUnfold" (formula "14") (term "1") (inst "#v0=x"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_4"))
            (rule "compound_division_2" (formula "14") (term "1") (inst "#v1=x_6") (inst "#v0=x_5"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_5"))
            (rule "assignment" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_6"))
            (rule "eval_order_access2" (formula "14") (term "1") (inst "#v0=x_arr"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_arr_2"))
            (rule "assignment_read_attribute_this" (formula "14"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "replaceKnownSelect_taclet210_0" (formula "14") (term "0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet210_1" (formula "14") (term "0,1,0"))
            (rule "assignment_read_length" (formula "14"))
            (branch "Normal Execution (x_arr_2 != null)"
               (builtin "One Step Simplification" (formula "14"))
               (rule "assignmentDivisionInt" (formula "14"))
               (branch "Case 1"
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "translateJavaDivInt" (formula "14") (term "0,1,0"))
                  (rule "methodCallReturn" (formula "14") (term "1"))
                  (rule "assignment" (formula "14") (term "1"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "methodCallEmpty" (formula "14") (term "1"))
                  (rule "tryEmpty" (formula "14") (term "1"))
                  (rule "emptyModality" (formula "14") (term "1"))
                  (rule "andRight" (formula "14"))
                  (branch "Case 1"
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_ltRight" (formula "10"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_gtToGeq" (formula "10"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                     (rule "mul_literals" (formula "10") (term "1"))
                     (rule "inEqSimp_contradEq7" (formula "11") (ifseqformula "10"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0"))
                     (rule "leq_literals" (formula "11") (term "0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "false_right" (formula "11"))
                     (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "1"))
                     (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                     (rule "inEqSimp_homoInEq1" (formula "9"))
                     (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
                     (rule "add_literals" (formula "9") (term "1,0"))
                     (rule "times_zero_1" (formula "9") (term "0"))
                     (rule "leq_literals" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "8"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
                     (rule "inEqSimp_homoInEq0" (formula "1"))
                     (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,0"))
                     (rule "times_zero_1" (formula "1") (term "0"))
                     (rule "qeq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "9"))
                     (rule "leq_literals" (formula "6") (term "0"))
                     (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "Class_invariant_axiom_for_HumanResources" (formula "11") (ifseqformula "3"))
                     (rule "replaceKnownSelect_taclet210_0" (formula "11") (term "0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet210_1" (formula "11") (term "0,0"))
                     (rule "notRight" (formula "11"))
                     (rule "close" (formula "10") (ifseqformula "1"))
                  )
                  (branch "Case 2"
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "closeTrue" (formula "14"))
                  )
               )
               (branch "Case 2"
                  (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "11")))
                  (rule "closeTrue" (formula "14"))
               )
            )
            (branch "Null Reference (x_arr_2 = null)"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Null Reference (x_arr_1 = null)"
            (rule "false_right" (formula "14"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
)
(branch "Null Reference (x_arr = null)"
   (rule "false_right" (formula "8"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
   (rule "closeFalse" (formula "1"))
)
)

}
